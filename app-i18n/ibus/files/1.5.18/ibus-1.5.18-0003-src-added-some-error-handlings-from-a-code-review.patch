From f5e0752fe345db2033a2b49de206dc62acd00a2b Mon Sep 17 00:00:00 2001
From: fujiwarat <takao.fujiwara1@gmail.com>
Date: Thu, 9 Nov 2017 12:14:08 +0900
Subject: [PATCH 3/5] src: Added some error handlings from a code review

Review URL: https://codereview.appspot.com/337900043
---
 src/ibuscomposetable.c | 47 ++++++++++++++++++----------------
 src/ibusenginesimple.c | 68 ++++++++++++++++++++++++++++++++++++++++++--------
 2 files changed, 83 insertions(+), 32 deletions(-)

diff --git a/src/ibuscomposetable.c b/src/ibuscomposetable.c
index 86c9314c..d473f581 100644
--- a/src/ibuscomposetable.c
+++ b/src/ibuscomposetable.c
@@ -1,7 +1,7 @@
 /* -*- mode: C; c-basic-offset: 4; indent-tabs-mode: nil; -*- */
 /* ibus - The Input Bus
  * Copyright (C) 2013-2014 Peng Huang <shawn.p.huang@gmail.com>
- * Copyright (C) 2013-2016 Takao Fujiwara <takao.fujiwara1@gmail.com>
+ * Copyright (C) 2013-2017 Takao Fujiwara <takao.fujiwara1@gmail.com>
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public
@@ -678,30 +678,33 @@ ibus_compose_table_load_cache (const gchar *compose_file)
     gsize length = 0;
     GError *error = NULL;
 
-    hash = g_str_hash (compose_file);
-    if ((path = ibus_compose_hash_get_cache_path (hash)) == NULL)
-        return NULL;
-    if (!g_file_test (path, G_FILE_TEST_EXISTS))
-        goto out_load_cache;
+    do {
+        hash = g_str_hash (compose_file);
+        if ((path = ibus_compose_hash_get_cache_path (hash)) == NULL)
+            return NULL;
+        if (!g_file_test (path, G_FILE_TEST_EXISTS))
+            break;
 
-    g_stat (compose_file, &original_buf);
-    g_stat (path, &cache_buf);
-    if (original_buf.st_mtime > cache_buf.st_mtime)
-        goto out_load_cache;
-    if (!g_file_get_contents (path, &contents, &length, &error)) {
-        g_warning ("Failed to get cache content %s: %s", path, error->message);
-        g_error_free (error);
-        goto out_load_cache;
-    }
+        if (g_stat (compose_file, &original_buf))
+            break;
+        if (g_stat (path, &cache_buf))
+            break;
+        if (original_buf.st_mtime > cache_buf.st_mtime)
+            break;
+        if (!g_file_get_contents (path, &contents, &length, &error)) {
+            g_warning ("Failed to get cache content %s: %s",
+                       path, error->message);
+            g_error_free (error);
+            break;
+        }
 
-    retval = ibus_compose_table_deserialize (contents, length);
-    if (retval == NULL)
-        g_warning ("Failed to load the cache file: %s", path);
-    else
-        retval->id = hash;
+        retval = ibus_compose_table_deserialize (contents, length);
+        if (retval == NULL)
+            g_warning ("Failed to load the cache file: %s", path);
+        else
+            retval->id = hash;
+    } while (0);
 
-
-out_load_cache:
     g_free (contents);
     g_free (path);
     return retval;
diff --git a/src/ibusenginesimple.c b/src/ibusenginesimple.c
index 63785223..6100eb7b 100644
--- a/src/ibusenginesimple.c
+++ b/src/ibusenginesimple.c
@@ -48,6 +48,27 @@
 #define IBUS_ENGINE_SIMPLE_GET_PRIVATE(o)  \
    (G_TYPE_INSTANCE_GET_PRIVATE ((o), IBUS_TYPE_ENGINE_SIMPLE, IBusEngineSimplePrivate))
 
+#define SET_COMPOSE_BUFFER_ELEMENT_NEXT(buffer, index, value) {         \
+    if ((index) < EMOJI_SOURCE_LEN) {                                   \
+        (buffer)[(index)] = (value);                                    \
+        (index) += 1;                                                   \
+    }                                                                   \
+}
+
+#define SET_COMPOSE_BUFFER_ELEMENT_END(buffer, index, value) {          \
+    if ((index) >= EMOJI_SOURCE_LEN) {                                  \
+        (index) = EMOJI_SOURCE_LEN;                                     \
+        (buffer)[EMOJI_SOURCE_LEN - 1] = (value);                       \
+    } else {                                                            \
+        (buffer)[(index)] = (value);                                    \
+    }                                                                   \
+}
+
+#define CHECK_COMPOSE_BUFFER_LENGTH(index) {                            \
+    if ((index) > EMOJI_SOURCE_LEN)                                     \
+        (index) = EMOJI_SOURCE_LEN;                                     \
+}
+
 typedef struct {
     GHashTable *dict;
     int         max_seq_len;
@@ -307,6 +328,8 @@ check_hex (IBusEngineSimple *simple,
     gchar *nptr = NULL;
     gchar buf[7];
 
+    CHECK_COMPOSE_BUFFER_LENGTH (n_compose);
+
     priv->tentative_match = 0;
     priv->tentative_match_len = 0;
 
@@ -387,6 +410,8 @@ check_emoji_table (IBusEngineSimple       *simple,
 
     g_assert (IBUS_IS_ENGINE_SIMPLE (simple));
 
+    CHECK_COMPOSE_BUFFER_LENGTH (n_compose);
+
     if (priv->lookup_table == NULL) {
         priv->lookup_table = ibus_lookup_table_new (10, 0, TRUE, TRUE);
         g_object_ref_sink (priv->lookup_table);
@@ -492,6 +517,7 @@ check_table (IBusEngineSimple       *simple,
     guint16 *seq;
 
     g_assert (IBUS_IS_ENGINE_SIMPLE (simple));
+    CHECK_COMPOSE_BUFFER_LENGTH (n_compose);
 
     if (n_compose > table->max_seq_len)
         return FALSE;
@@ -562,6 +588,8 @@ ibus_check_compact_table (const IBusComposeTableCompact *table,
     if (output_char)
         *output_char = 0;
 
+    CHECK_COMPOSE_BUFFER_LENGTH (n_compose);
+
     /* Will never match, if the sequence in the compose buffer is longer
      * than the sequences in the table.  Further, compare_seq (key, val)
      * will overrun val if key is longer than val. */
@@ -659,6 +687,8 @@ check_normalize_nfc (gunichar* combination_buffer, gint n_compose)
 
     n_combinations = 1;
 
+    CHECK_COMPOSE_BUFFER_LENGTH (n_compose);
+
     for (i = 1; i < n_compose; i++ )
         n_combinations *= i;
 
@@ -719,6 +749,8 @@ ibus_check_algorithmically (const guint16 *compose_buffer,
     if (output_char)
         *output_char = 0;
 
+    CHECK_COMPOSE_BUFFER_LENGTH (n_compose);
+
     if (n_compose >= IBUS_MAX_COMPOSE_LEN)
         return FALSE;
 
@@ -806,6 +838,8 @@ no_sequence_matches (IBusEngineSimple *simple,
 
     gunichar ch;
 
+    CHECK_COMPOSE_BUFFER_LENGTH (n_compose);
+
     /* No compose sequences found, check first if we have a partial
      * match pending.
      */
@@ -975,8 +1009,12 @@ ibus_engine_simple_process_key_event (IBusEngine *engine,
     gboolean compose_finish;
     gunichar output_char;
 
-    while (priv->compose_buffer[n_compose] != 0)
+    while (priv->compose_buffer[n_compose] != 0 && n_compose < EMOJI_SOURCE_LEN)
         n_compose++;
+    if (n_compose >= EMOJI_SOURCE_LEN) {
+        g_warning ("copmose table buffer is full.");
+        n_compose = EMOJI_SOURCE_LEN - 1;
+    }
 
     if (modifiers & IBUS_RELEASE_MASK) {
         if (priv->in_hex_sequence &&
@@ -1197,15 +1235,16 @@ ibus_engine_simple_process_key_event (IBusEngine *engine,
 
     /* Then, check for compose sequences */
     if (priv->in_hex_sequence) {
-        if (hex_keyval)
-            priv->compose_buffer[n_compose++] = hex_keyval;
-        else if (is_escape) {
+        if (hex_keyval) {
+            SET_COMPOSE_BUFFER_ELEMENT_NEXT (priv->compose_buffer,
+                                             n_compose,
+                                             hex_keyval);
+        } else if (is_escape) {
             // FIXME
             ibus_engine_simple_reset (engine);
 
             return TRUE;
-        }
-        else if (!is_hex_end) {
+        } else if (!is_hex_end) {
             // FIXME
             /* non-hex character in hex sequence */
             // beep_window (event->window);
@@ -1220,11 +1259,15 @@ ibus_engine_simple_process_key_event (IBusEngine *engine,
                  * E.g. "1" and "2" are  indexes of emoji "1".
                  * "100" is an annotation of the emoji "100".
                  */
-                priv->compose_buffer[n_compose++] = printable_keyval;
+                SET_COMPOSE_BUFFER_ELEMENT_NEXT (priv->compose_buffer,
+                                                 n_compose,
+                                                 printable_keyval);
             }
         }
         else if (is_space && (modifiers & IBUS_SHIFT_MASK)) {
-            priv->compose_buffer[n_compose++] = IBUS_KEY_space;
+            SET_COMPOSE_BUFFER_ELEMENT_NEXT (priv->compose_buffer,
+                                             n_compose,
+                                             IBUS_KEY_space);
         }
         else if (is_escape) {
             ibus_engine_simple_reset (engine);
@@ -1235,10 +1278,14 @@ ibus_engine_simple_process_key_event (IBusEngine *engine,
             return TRUE;
         }
     } else {
-        priv->compose_buffer[n_compose++] = keyval;
+        SET_COMPOSE_BUFFER_ELEMENT_NEXT (priv->compose_buffer,
+                                         n_compose,
+                                         keyval);
     }
 
-    priv->compose_buffer[n_compose] = 0;
+    SET_COMPOSE_BUFFER_ELEMENT_END (priv->compose_buffer,
+                                    n_compose,
+                                    0);
 
     if (priv->in_hex_sequence) {
         /* If the modifiers are still held down, consider the sequence again */
@@ -1427,6 +1474,7 @@ ibus_engine_simple_candidate_clicked (IBusEngine *engine,
         keyval = IBUS_KEY_1 + index;
     while (priv->compose_buffer[n_compose] != 0)
         n_compose++;
+    CHECK_COMPOSE_BUFFER_LENGTH (n_compose);
     ibus_engine_simple_set_number_on_lookup_table (simple, keyval, n_compose);
 }
 
-- 
2.15.1

